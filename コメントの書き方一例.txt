ソースコードの例
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
//================================================================================================================
// EnemyGenerator.cs	←クラス名
// 製作者：戸軽隆二		←ソースを書いた人
//================================================================================================================
// 概要
//		このクラスをシーンで生成するだけで自動的に敵キャラクターを生成する。
//		敵の出現パターンの調整をする場合はprivate変数の値を変更すればOK!
//		
//		みたいな感じで概要欄に分かりやすく使い方と内容を記述
//================================================================================================================
// バージョン
//		1.0 クラス生成                              2017/01/16 戸軽隆二 
//		1.1 ソースコード修正　より見やすく			2017/01/19 戸軽隆二
//		2.0 大幅な修正　敵の出現パターン変更		2017/01/25 戸軽隆二
//================================================================================================================
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class EnemyGenerator : MonoBehaviour {
	//---------------------------------------------------------------
	// private変数
	int count;			// 判定回数
	bool attackFlg;		// 攻撃中かそうでないかのフラグ判定
	float frame;		// 経過時間
	
	//---------------------------------------------------------------
	// public変数
	public int sceneNumber;				// 現在のシーン番号
	public unsinged float frameAll;		// 総合計プレイ時間

	//================================================================================================================
	// 最初に実行する処理
	void Start() {
		//-----------------------
		// 初期化の処理
		int count = 0;
		attackFlg = false;
		frame = 0;
		
		// 条件にあう場合はオブジェクト削除
		if (count == 100) Destroy(gameobject);
	}

	//================================================================================================================
	// 常に更新し続ける処理
	void Update() {
	}

	//================================================================================================================
	// プロパティ関数
	public int Count { get { return count; } set { count = value; } }
	public float AttackFlg { get { return attackFlg; } set { attackFlg = value; } }

}
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
備考
・関数同士の間は " === " で区切る。

・関数内の処理の説明は " --- " で区切る。
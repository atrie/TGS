//================================================================================================================
// HitCheck.cpp
// 製作者：戸軽隆二
//================================================================================================================
/* 概要
		このクラスでは
		・敵と勇者（またはお母さん）同士の当たり判定
		・敵同士の当たり判定
		・勇者とお母さんの当たり判定
		の３つの判定をするための関数があります。
   使い方例
		HitCheck check;
		if (check.EnemyAndChara(敵の情報をVector<Sprite*>で, 勇者（またはお母さん）の情報をSprite*で) == true) {
			敵と勇者（またはお母さん）が触れている時の処理
		}
		if (check.EnemyAndEnemy(敵の情報をVector<Sprite*>で) == true){
			敵同士が触れている時の処理
		}
  */
  //================================================================================================================
  // バージョン
  //		1.0 クラス生成                              2017/02/21 戸軽隆二 
  //================================================================================================================
#include "HitCheck.h"
using namespace cocos2d;

//=========================================================================================================================
// 当たり判定：敵と勇者（またはお母さん）同士の当たり判定をする
//=========================================================================================================================
bool HitCheck::EnemyAndChara(Vector<Sprite*> spCon, Sprite* player) {
	// 当たり判定の範囲
	int disMax = 64;
	for (auto enemy : spCon) {
		// 敵と勇者（もしくはお母さん）の距離を計算
		float distance = player->getPosition().getDistance(enemy->getPosition());
		// 敵と勇者（またはお母さん）の距離が当たり判定の範囲内ならtrueを返す
		if (distance <= disMax)
			return true;
	}
	// 敵と勇者（もしくはお母さん）が触れていなければfalseを変えす
	return false;
}
//=========================================================================================================================
// 当たり判定：敵と敵同士の当たり判定をする
//=========================================================================================================================
bool HitCheck::EnemyAndEnemy(Vector<cocos2d::Sprite*> spCon) {
	// 当たり判定の範囲
	int disMax = 64;
	for (auto enemy1 : spCon) {
		for (auto enemy2 : spCon) {
			// 同じ敵は比較しない
			if (enemy1 == enemy2) continue;
			else {
				// 敵同士の距離を計算
				float distance = enemy1->getPosition().getDistance(enemy2->getPosition());
				// 敵同士の距離が当たり判定の範囲内ならtrueを返す
				if (distance <= disMax) {
					return true;
				}
			}
		}
	}
	// 敵同士が重なっていなければfalseを返す
	return false;
}
//=========================================================================================================================
// 当たり判定：勇者とお母さんの当たり判定
//=========================================================================================================================
bool HitCheck::HeroAndMother(Sprite* hero, Sprite* mother) {
	int disMax = 64;
	float distance = hero->getPosition().getDistance(mother->getPosition());
	if (distance <= disMax) {
		return true;
	}
	return false;
}